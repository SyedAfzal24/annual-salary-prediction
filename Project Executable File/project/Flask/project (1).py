# -*- coding: utf-8 -*-
"""project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i8IGGXcsmBB-RMcRSCLAaYrVXBIZeHum
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split,GridSearchCV

df = pd.read_excel('/content/NewDoctorsPay.xlsx')

df.shape

df.info()
df.describe()

df.isnull().sum()

le = LabelEncoder()
df['Specialty'] = le.fit_transform(df['Specialty'])
df['Feel Fairly Compensated'] = le.fit_transform(df['Feel Fairly Compensated'])
df['Overall Satisfaction'] = le.fit_transform(df['Overall Satisfaction'])
df['Satisfied Income'] = le.fit_transform(df['Satisfied Income'])
df['Would Choose Medicine Again'] = le.fit_transform(df['Would Choose Medicine Again'])
df['Would Choose the Same Specialty'] = le.fit_transform(df['Would Choose the Same Specialty'])
df['Survey Respondents by Specialty'] = le.fit_transform(df['Survey Respondents by Specialty'])

df.describe()

## Count Plot

sns.countplot(df['Annual Income'])
plt.show()

sns.boxplot(x='Annual Income',y='Overall Satisfaction',data=df)
plt.show()

sns.pairplot(df)
plt.show()

x = df.drop(['Annual Income'],axis= 1)
y = df['Annual Income']

from sklearn.model_selection import train_test_split,GridSearchCV

x_train , x_test , y_train ,y_test = train_test_split(x , y,test_size = 0.3, random_state = 42)

from sklearn.linear_model import LinearRegression

reg = LinearRegression()

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

x_train = x_train.replace('[\$,%]','', regex=True).astype('float') / 100
x_test = x_test.replace('[\$,%]', '', regex=True).astype('float') / 100
y_train = y_train.replace('[\$,%]','', regex=True).astype('float') / 100
y_test = y_test.replace('[\$,%]','', regex=True).astype('float') / 100

imputer_x = SimpleImputer(strategy='mean')
x_train = pd.DataFrame(imputer_x.fit_transform(x_train))
x_test = pd.DataFrame(imputer_x.transform(x_test))

imputer_y = SimpleImputer(strategy='mean')
y_train = imputer_y.fit_transform(y_train.values.reshape(-1, 1))
y_test = imputer_y.transform(y_test.values.reshape(-1, 1))

reg = LinearRegression()
reg.fit(x_train, y_train)

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

y_train_pred = reg.predict(x_train)
y_test_pred = reg.predict(x_test)

y_train_pred[:5]

y_test_pred[:5]

#Accuracy For With Training Data Linear Regression

r2_score(y_train,y_train_pred)*100

#mean square error for training data
mean_squared_error(y_train,y_train_pred)

#accuaracy for with testing data linear regression
r2_score(y_test,y_test_pred)*100

#mean square error for testing data
mean_squared_error(y_test,y_test_pred)

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(n_estimators=100,random_state=42)

rf.fit(x_train,y_train)

y_train_pred = rf.predict(x_train)
y_test_pred = rf.predict(x_test)

r2_score(y_train,y_train_pred)*100

mean_squared_error(y_train,y_train_pred)

r2_score(y_test,y_test_pred)*100

mean_squared_error(y_test,y_test_pred)

from sklearn.tree import DecisionTreeRegressor

dtr = DecisionTreeRegressor(random_state=42)

dtr.fit(x_train,y_train)

y_train_pred = dtr.predict(x_train)
y_test_pred = dtr.predict(x_test)

y_train_pred[:5]

y_test_pred[:5]

r2_score(y_train,y_train_pred)*100

mean_squared_error(y_train,y_train_pred)

r2_score(y_train,y_train_pred)*100

mean_squared_error(y_test,y_test_pred)

import xgboost as xgb

xg_reg = xgb.XGBRegressor()

xg_reg.fit(x_train, y_train)

y_train_pred = xg_reg.predict(x_train)
y_test_pred = xg_reg.predict(x_test)

r2_score(y_train,y_train_pred)*100

mean_squared_error(y_train,y_train_pred)

r2_score(y_test,y_test_pred)*100

from sklearn.metrics import mean_squared_error

mean_squared_error(y_test, y_test_pred)

r2_score(y_test,y_test_pred)*100

reg.predict([[11,5,1,5,3,0,1]])

reg.predict([[23,9,6,9,1,12,4]])

reg.predict([[10,7,9,7,3,9,0]])

reg.predict([[17,2,6,2,1,19,4]])

reg.predict([[25,0,3,0,2,15,0]])

reg.predict([[19,7,8,7,1,7,9]])

import pickle

with open("NewDoctorsPay.pkl","wb") as f:
  pickle.dump(reg,f)